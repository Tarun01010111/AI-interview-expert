{"Tarun Goswami": [{"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-23 22:52", "duration": "0:01:01", "overall_score": 1.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a LIFO (Last-In, First-Out) queue?", "answer": "stack", "feedback": {"overall_score": 1, "suggested_improvements": ["Try to provide a more detailed answer."], "model_answer": "A stack follows the LIFO principle, where the last element added is the first element removed.  Queues, on the other hand, are FIFO (First-In, First-Out)."}}, {"question": "What is the time complexity of searching for an element in a sorted array using binary search?", "answer": "0(n)", "feedback": {"overall_score": 1, "suggested_improvements": ["Try to provide a more detailed answer.", "Review the model answer for more details."], "model_answer": "Binary search repeatedly divides the search interval in half.  This leads to a logarithmic time complexity."}}]}, {"company": "Microsoft", "job_title": "Data Scientist", "difficulty": "medium", "question_type": "Practical", "date": "2025-06-24 10:15", "duration": "0:02:46", "overall_score": 1.0, "answers": [{"question": "You are analyzing user engagement data for a new Microsoft Teams feature.  The data is provided as a pandas DataFrame called 'engagement_data' with columns 'user_id', 'date', and 'engagement_score' (a numerical score representing user engagement).  Some users might have multiple entries for the same day. Write a function that calculates the average daily engagement score for each user, handling potential errors gracefully.  The function should return a pandas DataFrame with columns 'user_id' and 'average_daily_engagement'.  If a user has no engagement data, their average should be 0.", "answer": "df.['user_id'].mean", "feedback": {"overall_score": 1, "suggested_improvements": ["Try to provide a more detailed answer.", "Review the model answer for more details."], "model_answer": "Option A correctly handles the aggregation at both the daily and user level, includes error handling for missing columns and other exceptions, and explicitly handles cases where a user has no engagement data by filling with 0. Option B and C only calculate average engagement without considering daily aggregation, and they fail to handle missing data. Option D lacks robustness in error handling."}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-24 10:43", "duration": "0:00:50", "overall_score": 0.0, "answers": [{"question": "What is the primary purpose of a 'version control system' like Git?", "answer": "to control every push or pull", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Version control systems, such as Git, are fundamentally designed for managing changes to code over time.  This enables multiple developers to work on the same project concurrently, while maintaining a history of all modifications.  Options B, C, and D describe other software tools or functionalities, but not the core purpose of version control.", "is_correct": false, "correct_option": null}}, {"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "stack", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A Stack is a data structure that operates on the LIFO principle.  The last element added to the stack is the first one to be removed.  The other options are different data structures with different behaviors. A queue uses FIFO (First-In-First-Out) whereas linked lists and binary trees don't inherently implement a queue mechanism.", "is_correct": false, "correct_option": null}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-24 10:59", "duration": "0:00:40", "overall_score": 0.0, "answers": [{"question": "Which data structure is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "b", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, where the last element added is the first to be removed.  Queues, on the other hand, are FIFO (First-In-First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Tree"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What is the time complexity of searching for an element in a sorted array using binary search?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Binary search repeatedly divides the search interval in half.  This results in a logarithmic time complexity.  Linear search (O(n)) checks each element sequentially.", "options": {"A": "O(n)", "B": "O(log n)", "C": "O(1)", "D": "O(n^2)"}, "is_correct": false, "correct_option": "O(log n)"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-24 11:08", "duration": "0:00:44", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "B", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, where the last element added is the first to be removed.  Queues follow FIFO (First-In-First-Out). Linked lists and binary trees can be adapted for LIFO behavior, but a stack is the most direct and efficient implementation.", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What is the time complexity of searching for a specific element in a sorted array using binary search?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Binary search repeatedly divides the search interval in half. This logarithmic reduction of the search space results in a time complexity of O(log n).  Linear search has O(n) complexity, while O(n^2) is typical of nested loops. O(1) represents constant time complexity.", "options": {"A": "O(n)", "B": "O(log n)", "C": "O(n^2)", "D": "O(1)"}, "is_correct": false, "correct_option": "O(log n)"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-24 11:22", "duration": "0:00:59", "overall_score": 66.66666666666666, "answers": [{"question": "Which of the following is NOT a fundamental data structure in computer science?", "answer": "D", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Regular expressions are used for pattern matching, not as a fundamental way to organize data like the other options.", "options": {"A": "Array", "B": "Linked List", "C": "Tree", "D": "Regular Expression"}, "is_correct": true, "correct_option": "D"}}, {"question": "What is the output of the following Python code snippet?\n```python\nx = 5\ny = 10\nprint(x + y)\n```", "answer": "A\n", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "The `+` operator performs addition in this context, so 5 + 10 = 15.", "options": {"A": "15", "B": "510", "C": "5", "D": "Error"}, "is_correct": true, "correct_option": "A"}}, {"question": "Which keyword is used to define a function in Python?", "answer": "B\n", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "`def` is the keyword used to define a function in Python.  `class` is used for classes.", "options": {"A": "class", "B": "def", "C": "function", "D": "procedure"}, "is_correct": false, "correct_option": "C"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "Practical", "date": "2025-06-24 11:36", "duration": "0:01:41", "overall_score": 1.0, "answers": [{"question": "Given a list of integers, write a function to find the sum of all even numbers in the list.", "answer": "no", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "The function iterates through the list.  If a number is even (modulo 2 equals 0), it's added to the running sum.  Finally, the total sum of even numbers is returned."}}, {"question": "Write a function that takes a string as input and reverses it.", "answer": "i have no idea", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "The most concise and Pythonic way to reverse a string is using slicing `[::-1]`.  Other methods like iterative loops or recursion are also valid, but less efficient for this specific task in Python."}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-24 11:54", "duration": "0:00:11", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a 'key-value' pair for storing data?", "answer": "", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Dictionaries in Python are implemented as hash tables, allowing for efficient key-based lookups.  Lists are ordered collections, tuples are immutable ordered collections, and sets are unordered collections of unique elements.", "options": {"A": "List", "B": "Tuple", "C": "Dictionary", "D": "Set"}, "is_correct": false, "correct_option": "Dictionary"}}, {"question": "What is the output of the following Python code snippet?\n```python\nx = 5\ny = 10\nprint(x + y)\n```", "answer": "", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "The '+' operator performs addition on numerical values in Python. Therefore, 5 + 10 evaluates to 15.", "options": {"A": "510", "B": "15", "C": "5", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-24 11:54", "duration": "0:00:25", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a 'key-value' pair for storing data?", "answer": "", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Dictionaries in Python are implemented as hash tables, allowing for efficient key-based lookups.  Lists are ordered collections, tuples are immutable ordered collections, and sets are unordered collections of unique elements.", "options": {"A": "List", "B": "Tuple", "C": "Dictionary", "D": "Set"}, "is_correct": false, "correct_option": "Dictionary"}}, {"question": "What is the output of the following Python code snippet?\n```python\nx = 5\ny = 10\nprint(x + y)\n```", "answer": "", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "The '+' operator performs addition on numerical values in Python. Therefore, 5 + 10 evaluates to 15.", "options": {"A": "510", "B": "15", "C": "5", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-24 12:49", "duration": "0:01:15", "overall_score": 50.0, "answers": [{"question": "What is the primary purpose of a version control system like Git?", "answer": "A\n", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Version control systems like Git are fundamentally designed for tracking changes in code, enabling collaboration among developers and facilitating easy rollback to previous versions if necessary.  Options B, C, and D describe functionalities that are not the primary purpose of a VCS.", "options": {"A": "To track changes to code and collaborate effectively on software projects.", "B": "To compile and run code more efficiently.", "C": "To automatically generate documentation for code.", "D": "To encrypt and secure code from unauthorized access."}, "is_correct": true, "correct_option": "A"}}, {"question": "Which data structure is best suited for implementing a Last-In-First-Out (LIFO) mechanism?", "answer": "B", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack is a fundamental data structure that follows the LIFO principle, meaning the last element added is the first one removed.  Queues follow FIFO (First-In-First-Out), linked lists are more general-purpose, and binary trees are tree-based structures, none of which inherently implement LIFO.", "options": {"A": "Queue", "B": "Linked List", "C": "Stack", "D": "Binary Tree"}, "is_correct": false, "correct_option": "C"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:12", "duration": "0:00:29", "overall_score": 0.0, "answers": [{"question": "Which data structure uses a key-value pair for storing data?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Dictionaries in Python are optimized for fast lookups using keys.  Lists, tuples, and sets do not inherently use key-value pairs.", "options": {"A": "List", "B": "Tuple", "C": "Dictionary", "D": "Set"}, "is_correct": false, "correct_option": "Dictionary"}}, {"question": "What is the output of the following Python code?\n```python\nx = 5\ny = 10\nprint(x + y)```", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "This code performs simple addition. The `+` operator adds the integer values of `x` and `y`, resulting in 15.", "options": {"A": "510", "B": "5", "C": "15", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:12", "duration": "0:00:34", "overall_score": 0.0, "answers": [{"question": "Which data structure uses a key-value pair for storing data?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Dictionaries in Python are optimized for fast lookups using keys.  Lists, tuples, and sets do not inherently use key-value pairs.", "options": {"A": "List", "B": "Tuple", "C": "Dictionary", "D": "Set"}, "is_correct": false, "correct_option": "Dictionary"}}, {"question": "What is the output of the following Python code?\n```python\nx = 5\ny = 10\nprint(x + y)```", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "This code performs simple addition. The `+` operator adds the integer values of `x` and `y`, resulting in 15.", "options": {"A": "510", "B": "5", "C": "15", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:13", "duration": "0:00:18", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, where the last element added is the first to be removed.  Queues, on the other hand, use FIFO (First-In-First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What is the time complexity of searching for an element in a sorted array using binary search?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Binary search repeatedly divides the search interval in half.  This results in logarithmic time complexity.", "options": {"A": "O(n)", "B": "O(log n)", "C": "O(1)", "D": "O(n^2)"}, "is_correct": false, "correct_option": "O(log n)"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "Practical", "date": "2025-06-25 00:26", "duration": "0:05:20", "overall_score": 1.0, "answers": [{"question": "Write a Python function that takes a list of integers and returns the sum of all even numbers in the list.", "answer": "ffgg", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Option A is a perfectly acceptable and clear implementation. Option B is incorrect; it doesn't check for even numbers. Option C sums all numbers, not just even ones. Option D sums all numbers."}}, {"question": "Write a Python function that takes a list of integers and returns the sum of all even numbers in the list.", "answer": "ffff", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Option A is a perfectly acceptable and clear implementation. Option B is incorrect; it doesn't check for even numbers. Option C sums all numbers, not just even ones. Option D sums all numbers."}}, {"question": "Given a string, write a Python function to reverse it.  For example, if the input is 'hello', the output should be 'olleh'.", "answer": "ff", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Options A, B, and C are all valid ways to reverse a string in Python. Option B uses Python's slicing feature for a concise solution. Option A uses the `reversed()` function and string joining. Option C iterates through the string in reverse order. Option D is incorrect; strings are immutable, so the `reverse()` method doesn't work directly on them."}}, {"question": "Given a string, write a Python function to reverse it.  For example, if the input is 'hello', the output should be 'olleh'.", "answer": "ff", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Options A, B, and C are all valid ways to reverse a string in Python. Option B uses Python's slicing feature for a concise solution. Option A uses the `reversed()` function and string joining. Option C iterates through the string in reverse order. Option D is incorrect; strings are immutable, so the `reverse()` method doesn't work directly on them."}}, {"question": "Given a string, write a Python function to reverse it.  For example, if the input is 'hello', the output should be 'olleh'.", "answer": "ff", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Options A, B, and C are all valid ways to reverse a string in Python. Option B uses Python's slicing feature for a concise solution. Option A uses the `reversed()` function and string joining. Option C iterates through the string in reverse order. Option D is incorrect; strings are immutable, so the `reverse()` method doesn't work directly on them."}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:59", "duration": "0:00:46", "overall_score": 100.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "A stack follows the LIFO principle, where the last element added is the first element removed.  Queues follow FIFO (First-In-First-Out). Linked lists can implement both, but stacks are inherently LIFO.", "options": {"A": "Stack", "B": "Queue", "C": "Linked List", "D": "Binary Tree"}, "is_correct": true, "correct_option": "A"}}, {"question": "What is the time complexity of accessing an element at a specific index in a Python list?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Python lists are implemented as dynamic arrays.  Accessing an element by its index takes constant time because the index directly maps to the memory location of the element. This is different from searching for a specific value where you would have a time complexity of O(n).", "options": {"A": "O(1)", "B": "O(log n)", "C": "O(n)", "D": "O(n^2)"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:59", "duration": "0:01:22", "overall_score": 100.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "A stack follows the LIFO principle, where the last element added is the first element removed.  Queues follow FIFO (First-In-First-Out). Linked lists can implement both, but stacks are inherently LIFO.", "options": {"A": "Stack", "B": "Queue", "C": "Linked List", "D": "Binary Tree"}, "is_correct": true, "correct_option": "A"}}, {"question": "What is the time complexity of accessing an element at a specific index in a Python list?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Python lists are implemented as dynamic arrays.  Accessing an element by its index takes constant time because the index directly maps to the memory location of the element. This is different from searching for a specific value where you would have a time complexity of O(n).", "options": {"A": "O(1)", "B": "O(log n)", "C": "O(n)", "D": "O(n^2)"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:59", "duration": "0:03:35", "overall_score": 100.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "A stack follows the LIFO principle, where the last element added is the first element removed.  Queues follow FIFO (First-In-First-Out). Linked lists can implement both, but stacks are inherently LIFO.", "options": {"A": "Stack", "B": "Queue", "C": "Linked List", "D": "Binary Tree"}, "is_correct": true, "correct_option": "A"}}, {"question": "What is the time complexity of accessing an element at a specific index in a Python list?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Python lists are implemented as dynamic arrays.  Accessing an element by its index takes constant time because the index directly maps to the memory location of the element. This is different from searching for a specific value where you would have a time complexity of O(n).", "options": {"A": "O(1)", "B": "O(log n)", "C": "O(n)", "D": "O(n^2)"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:59", "duration": "0:03:42", "overall_score": 100.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "A stack follows the LIFO principle, where the last element added is the first element removed.  Queues follow FIFO (First-In-First-Out). Linked lists can implement both, but stacks are inherently LIFO.", "options": {"A": "Stack", "B": "Queue", "C": "Linked List", "D": "Binary Tree"}, "is_correct": true, "correct_option": "A"}}, {"question": "What is the time complexity of accessing an element at a specific index in a Python list?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Python lists are implemented as dynamic arrays.  Accessing an element by its index takes constant time because the index directly maps to the memory location of the element. This is different from searching for a specific value where you would have a time complexity of O(n).", "options": {"A": "O(1)", "B": "O(log n)", "C": "O(n)", "D": "O(n^2)"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:59", "duration": "0:03:48", "overall_score": 100.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "A stack follows the LIFO principle, where the last element added is the first element removed.  Queues follow FIFO (First-In-First-Out). Linked lists can implement both, but stacks are inherently LIFO.", "options": {"A": "Stack", "B": "Queue", "C": "Linked List", "D": "Binary Tree"}, "is_correct": true, "correct_option": "A"}}, {"question": "What is the time complexity of accessing an element at a specific index in a Python list?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Python lists are implemented as dynamic arrays.  Accessing an element by its index takes constant time because the index directly maps to the memory location of the element. This is different from searching for a specific value where you would have a time complexity of O(n).", "options": {"A": "O(1)", "B": "O(log n)", "C": "O(n)", "D": "O(n^2)"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 00:59", "duration": "0:03:53", "overall_score": 100.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In-First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "A stack follows the LIFO principle, where the last element added is the first element removed.  Queues follow FIFO (First-In-First-Out). Linked lists can implement both, but stacks are inherently LIFO.", "options": {"A": "Stack", "B": "Queue", "C": "Linked List", "D": "Binary Tree"}, "is_correct": true, "correct_option": "A"}}, {"question": "What is the time complexity of accessing an element at a specific index in a Python list?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Python lists are implemented as dynamic arrays.  Accessing an element by its index takes constant time because the index directly maps to the memory location of the element. This is different from searching for a specific value where you would have a time complexity of O(n).", "options": {"A": "O(1)", "B": "O(log n)", "C": "O(n)", "D": "O(n^2)"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 01:03", "duration": "0:00:48", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a 'key-value' pair for storing data?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Dictionaries in Python store data in key-value pairs, allowing efficient lookups using keys. Lists are ordered sequences, tuples are immutable ordered sequences, and sets are unordered collections of unique elements.", "options": {"A": "List", "B": "Tuple", "C": "Dictionary", "D": "Set"}, "is_correct": false, "correct_option": "Dictionary"}}, {"question": "What is the output of the following Python code snippet?\n```python\nx = 5\ny = 10\nprint(x + y)```", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "The '+' operator performs addition on numerical values in Python. Therefore, 5 + 10 evaluates to 15.", "options": {"A": "510", "B": "15", "C": "5", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 01:03", "duration": "0:01:24", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a 'key-value' pair for storing data?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Dictionaries in Python store data in key-value pairs, allowing efficient lookups using keys. Lists are ordered sequences, tuples are immutable ordered sequences, and sets are unordered collections of unique elements.", "options": {"A": "List", "B": "Tuple", "C": "Dictionary", "D": "Set"}, "is_correct": false, "correct_option": "Dictionary"}}, {"question": "What is the output of the following Python code snippet?\n```python\nx = 5\ny = 10\nprint(x + y)```", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "The '+' operator performs addition on numerical values in Python. Therefore, 5 + 10 evaluates to 15.", "options": {"A": "510", "B": "15", "C": "5", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 01:03", "duration": "0:03:01", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a 'key-value' pair for storing data?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Dictionaries in Python store data in key-value pairs, allowing efficient lookups using keys. Lists are ordered sequences, tuples are immutable ordered sequences, and sets are unordered collections of unique elements.", "options": {"A": "List", "B": "Tuple", "C": "Dictionary", "D": "Set"}, "is_correct": false, "correct_option": "Dictionary"}}, {"question": "What is the output of the following Python code snippet?\n```python\nx = 5\ny = 10\nprint(x + y)```", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "The '+' operator performs addition on numerical values in Python. Therefore, 5 + 10 evaluates to 15.", "options": {"A": "510", "B": "15", "C": "5", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 01:03", "duration": "0:03:08", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a 'key-value' pair for storing data?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Dictionaries in Python store data in key-value pairs, allowing efficient lookups using keys. Lists are ordered sequences, tuples are immutable ordered sequences, and sets are unordered collections of unique elements.", "options": {"A": "List", "B": "Tuple", "C": "Dictionary", "D": "Set"}, "is_correct": false, "correct_option": "Dictionary"}}, {"question": "What is the output of the following Python code snippet?\n```python\nx = 5\ny = 10\nprint(x + y)```", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "The '+' operator performs addition on numerical values in Python. Therefore, 5 + 10 evaluates to 15.", "options": {"A": "510", "B": "15", "C": "5", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 01:07", "duration": "0:02:11", "overall_score": 0.0, "answers": [{"question": "What is the output of the following Python code snippet?\n\n```python\nx = 5\ny = 10\nprint(x + y)\n```", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "The code simply adds the values of x (5) and y (10) and prints the result, which is 15.", "options": {"A": "510", "B": "15", "C": "5", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 01:07", "duration": "0:05:04", "overall_score": 0.0, "answers": [{"question": "What is the output of the following Python code snippet?\n\n```python\nx = 5\ny = 10\nprint(x + y)\n```", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "The code simply adds the values of x (5) and y (10) and prints the result, which is 15.", "options": {"A": "510", "B": "15", "C": "5", "D": "Error"}, "is_correct": false, "correct_option": "15"}}]}, {"company": "Google", "job_title": "Data Scientist", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 01:12", "duration": "0:00:10", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a common data visualization technique used in data science?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Algorithmic complexity analysis is a way to evaluate the efficiency of algorithms, not a data visualization technique. Scatter plots, histograms, and bar charts are all common methods for visualizing data.", "options": {"A": "Algorithmic Complexity Analysis", "B": "Scatter Plot", "C": "Histogram", "D": "Bar Chart"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Data Scientist", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 01:12", "duration": "0:00:18", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a common data visualization technique used in data science?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Algorithmic complexity analysis is a way to evaluate the efficiency of algorithms, not a data visualization technique. Scatter plots, histograms, and bar charts are all common methods for visualizing data.", "options": {"A": "Algorithmic Complexity Analysis", "B": "Scatter Plot", "C": "Histogram", "D": "Bar Chart"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 21:20", "duration": "0:01:14", "overall_score": 0.0, "answers": [{"question": "Which data structure uses a Last-In-First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  This is in contrast to a queue which uses FIFO (First-In-First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What does API stand for in the context of software development?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "API stands for Application Programming Interface. It's a set of rules and specifications that software programs can follow to communicate with each other.", "options": {"A": "Advanced Programming Interface", "B": "Application Programming Interface", "C": "Advanced Procedural Interface", "D": "Automated Processing Interface"}, "is_correct": false, "correct_option": "Application Programming Interface"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 21:20", "duration": "0:01:20", "overall_score": 0.0, "answers": [{"question": "Which data structure uses a Last-In-First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  This is in contrast to a queue which uses FIFO (First-In-First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What does API stand for in the context of software development?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "API stands for Application Programming Interface. It's a set of rules and specifications that software programs can follow to communicate with each other.", "options": {"A": "Advanced Programming Interface", "B": "Application Programming Interface", "C": "Advanced Procedural Interface", "D": "Automated Processing Interface"}, "is_correct": false, "correct_option": "Application Programming Interface"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 21:20", "duration": "0:01:43", "overall_score": 0.0, "answers": [{"question": "Which data structure uses a Last-In-First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  This is in contrast to a queue which uses FIFO (First-In-First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What does API stand for in the context of software development?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "API stands for Application Programming Interface. It's a set of rules and specifications that software programs can follow to communicate with each other.", "options": {"A": "Advanced Programming Interface", "B": "Application Programming Interface", "C": "Advanced Procedural Interface", "D": "Automated Processing Interface"}, "is_correct": false, "correct_option": "Application Programming Interface"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-25 21:20", "duration": "0:02:05", "overall_score": 0.0, "answers": [{"question": "Which data structure uses a Last-In-First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  This is in contrast to a queue which uses FIFO (First-In-First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What does API stand for in the context of software development?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "API stands for Application Programming Interface. It's a set of rules and specifications that software programs can follow to communicate with each other.", "options": {"A": "Advanced Programming Interface", "B": "Application Programming Interface", "C": "Advanced Procedural Interface", "D": "Automated Processing Interface"}, "is_correct": false, "correct_option": "Application Programming Interface"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 00:25", "duration": "0:00:08", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In, First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, where the last element added is the first one removed.  Queues, on the other hand, follow FIFO (First-In, First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 00:25", "duration": "0:00:15", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In, First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, where the last element added is the first one removed.  Queues, on the other hand, follow FIFO (First-In, First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 00:25", "duration": "0:00:36", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures is best suited for implementing a Last-In, First-Out (LIFO) queue?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, where the last element added is the first one removed.  Queues, on the other hand, follow FIFO (First-In, First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "Practical", "date": "2025-06-26 16:36", "duration": "0:01:04", "overall_score": 1.0, "answers": [{"question": "Given a list of integers, write a function to find the sum of all even numbers in the list.", "answer": "none", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Option A correctly iterates through the list, checks if each number is even using the modulo operator, and adds it to the sum if it is. Option B is incorrect because it divides the total sum by 2, which doesn't guarantee the correct sum of even numbers. Option C sums odd numbers. Option D sums all numbers without checking for even numbers."}}, {"question": "Write a function that takes a string as input and reverses it.", "answer": "trtgtr", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Option C uses slicing to efficiently reverse the string. Option A reverses every other character. Option B incorrectly attempts to use the list method `reverse()` on a string. Option D, while correct, is slightly less efficient than the slicing approach."}}, {"question": "Given a dictionary representing a product's details (name: str, price: float, quantity: int), write a function to calculate the total value of the product (price * quantity).", "answer": "", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details."], "model_answer": "Option A correctly accesses the 'price' and 'quantity' keys from the dictionary and multiplies them. Option B tries to access attributes like an object which is incorrect for dictionaries. Option C adds the price and quantity instead of multiplying. Option D is correct but adds unnecessary complexity for a simple task."}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "Practical", "date": "2025-06-26 16:36", "duration": "0:01:09", "overall_score": 1.0, "answers": [{"question": "Given a list of integers, write a function to find the sum of all even numbers in the list.", "answer": "none", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Option A correctly iterates through the list, checks if each number is even using the modulo operator, and adds it to the sum if it is. Option B is incorrect because it divides the total sum by 2, which doesn't guarantee the correct sum of even numbers. Option C sums odd numbers. Option D sums all numbers without checking for even numbers."}}, {"question": "Write a function that takes a string as input and reverses it.", "answer": "trtgtr", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Option C uses slicing to efficiently reverse the string. Option A reverses every other character. Option B incorrectly attempts to use the list method `reverse()` on a string. Option D, while correct, is slightly less efficient than the slicing approach."}}, {"question": "Given a dictionary representing a product's details (name: str, price: float, quantity: int), write a function to calculate the total value of the product (price * quantity).", "answer": "", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details."], "model_answer": "Option A correctly accesses the 'price' and 'quantity' keys from the dictionary and multiplies them. Option B tries to access attributes like an object which is incorrect for dictionaries. Option C adds the price and quantity instead of multiplying. Option D is correct but adds unnecessary complexity for a simple task."}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "Practical", "date": "2025-06-26 16:36", "duration": "0:01:35", "overall_score": 1.0, "answers": [{"question": "Given a list of integers, write a function to find the sum of all even numbers in the list.", "answer": "none", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Option A correctly iterates through the list, checks if each number is even using the modulo operator, and adds it to the sum if it is. Option B is incorrect because it divides the total sum by 2, which doesn't guarantee the correct sum of even numbers. Option C sums odd numbers. Option D sums all numbers without checking for even numbers."}}, {"question": "Write a function that takes a string as input and reverses it.", "answer": "trtgtr", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details.", "Your answer misses some key points. Review the model answer for more depth and accuracy."], "model_answer": "Option C uses slicing to efficiently reverse the string. Option A reverses every other character. Option B incorrectly attempts to use the list method `reverse()` on a string. Option D, while correct, is slightly less efficient than the slicing approach."}}, {"question": "Given a dictionary representing a product's details (name: str, price: float, quantity: int), write a function to calculate the total value of the product (price * quantity).", "answer": "", "feedback": {"overall_score": 1, "suggested_improvements": ["Your answer is too short. Try to elaborate more and provide specific details."], "model_answer": "Option A correctly accesses the 'price' and 'quantity' keys from the dictionary and multiplies them. Option B tries to access attributes like an object which is incorrect for dictionaries. Option C adds the price and quantity instead of multiplying. Option D is correct but adds unnecessary complexity for a simple task."}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:36", "duration": "0:00:33", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a valid Python data type?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Floatstring is not a valid Python data type.  The other options (Integer, Boolean, and String) are all standard Python data types.", "options": {"A": "Floatstring", "B": "Integer", "C": "Boolean", "D": "String"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:36", "duration": "0:01:14", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a valid Python data type?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Floatstring is not a valid Python data type.  The other options (Integer, Boolean, and String) are all standard Python data types.", "options": {"A": "Floatstring", "B": "Integer", "C": "Boolean", "D": "String"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:36", "duration": "0:07:29", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a valid Python data type?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Floatstring is not a valid Python data type.  The other options (Integer, Boolean, and String) are all standard Python data types.", "options": {"A": "Floatstring", "B": "Integer", "C": "Boolean", "D": "String"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:36", "duration": "0:07:37", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a valid Python data type?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Floatstring is not a valid Python data type.  The other options (Integer, Boolean, and String) are all standard Python data types.", "options": {"A": "Floatstring", "B": "Integer", "C": "Boolean", "D": "String"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:36", "duration": "0:07:41", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a valid Python data type?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Floatstring is not a valid Python data type.  The other options (Integer, Boolean, and String) are all standard Python data types.", "options": {"A": "Floatstring", "B": "Integer", "C": "Boolean", "D": "String"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:36", "duration": "0:07:50", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a valid Python data type?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Floatstring is not a valid Python data type.  The other options (Integer, Boolean, and String) are all standard Python data types.", "options": {"A": "Floatstring", "B": "Integer", "C": "Boolean", "D": "String"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:36", "duration": "0:07:55", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a valid Python data type?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Floatstring is not a valid Python data type.  The other options (Integer, Boolean, and String) are all standard Python data types.", "options": {"A": "Floatstring", "B": "Integer", "C": "Boolean", "D": "String"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:36", "duration": "0:07:58", "overall_score": 100.0, "answers": [{"question": "Which of the following is NOT a valid Python data type?", "answer": "A", "feedback": {"overall_score": 1, "suggested_improvements": ["Correct answer!"], "model_answer": "Floatstring is not a valid Python data type.  The other options (Integer, Boolean, and String) are all standard Python data types.", "options": {"A": "Floatstring", "B": "Integer", "C": "Boolean", "D": "String"}, "is_correct": true, "correct_option": "A"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:45", "duration": "0:00:18", "overall_score": 0.0, "answers": [{"question": "Which data structure uses the LIFO (Last-In, First-Out) principle?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  Think of a stack of plates \u2013 you take the top one off first.", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-26 18:45", "duration": "0:00:37", "overall_score": 0.0, "answers": [{"question": "Which data structure uses the LIFO (Last-In, First-Out) principle?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  Think of a stack of plates \u2013 you take the top one off first.", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}]}], "Tarun": [{"company": "OpenAI", "job_title": "AI Researcher", "difficulty": "medium", "question_type": "MCQ", "date": "2025-06-27 00:14", "duration": "0:00:23", "overall_score": 0.0, "answers": [{"question": "Which of the following techniques is LEAST likely to effectively mitigate catastrophic forgetting in a continual learning scenario for a large language model (LLM)?", "answer": "B", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Fine-tuning the entire LLM without regularization is prone to catastrophic forgetting because the updates to the weights can overwrite previously learned knowledge.  EWC, SI, and LwF are all designed to specifically mitigate this problem by selectively updating weights or focusing on preserving previously acquired information.", "options": {"A": "Fine-tuning the entire LLM on a new dataset without any regularization.", "B": "Employing Elastic Weight Consolidation (EWC).", "C": "Using Synaptic Intelligence (SI) to protect important weights.", "D": "Implementing a learning without forgetting (LwF) approach."}, "is_correct": false, "correct_option": "A"}}]}, {"company": "OpenAI", "job_title": "AI Researcher", "difficulty": "medium", "question_type": "MCQ", "date": "2025-06-27 00:14", "duration": "0:01:13", "overall_score": 0.0, "answers": [{"question": "Which of the following techniques is LEAST likely to effectively mitigate catastrophic forgetting in a continual learning scenario for a large language model (LLM)?", "answer": "B", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Fine-tuning the entire LLM without regularization is prone to catastrophic forgetting because the updates to the weights can overwrite previously learned knowledge.  EWC, SI, and LwF are all designed to specifically mitigate this problem by selectively updating weights or focusing on preserving previously acquired information.", "options": {"A": "Fine-tuning the entire LLM on a new dataset without any regularization.", "B": "Employing Elastic Weight Consolidation (EWC).", "C": "Using Synaptic Intelligence (SI) to protect important weights.", "D": "Implementing a learning without forgetting (LwF) approach."}, "is_correct": false, "correct_option": "A"}}]}], "Tarun Goswamiii": [{"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-27 14:20", "duration": "0:00:12", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a Last-In-First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  Queues, linked lists, and binary trees have different access and ordering properties.", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-27 14:20", "duration": "0:00:16", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a Last-In-First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  Queues, linked lists, and binary trees have different access and ordering properties.", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-27 14:20", "duration": "0:00:34", "overall_score": 0.0, "answers": [{"question": "Which of the following data structures uses a Last-In-First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  Queues, linked lists, and binary trees have different access and ordering properties.", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Binary Tree"}, "is_correct": false, "correct_option": "Stack"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-27 14:23", "duration": "0:00:27", "overall_score": 0.0, "answers": [{"question": "Which data structure uses a Last-In, First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  This is in contrast to a queue which uses FIFO (First-In, First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Heap"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "Which data structure uses a Last-In, First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  This is in contrast to a queue which uses FIFO (First-In, First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Heap"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What is the time complexity of searching for an element in a sorted array using binary search?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Binary search repeatedly divides the search interval in half.  This results in a logarithmic time complexity, making it significantly faster than linear search (O(n)) for large datasets.", "options": {"A": "O(n)", "B": "O(log n)", "C": "O(1)", "D": "O(n^2)"}, "is_correct": false, "correct_option": "O(log n)"}}]}, {"company": "Google", "job_title": "Software Engineer", "difficulty": "easy", "question_type": "MCQ", "date": "2025-06-27 14:23", "duration": "0:00:32", "overall_score": 0.0, "answers": [{"question": "Which data structure uses a Last-In, First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  This is in contrast to a queue which uses FIFO (First-In, First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Heap"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "Which data structure uses a Last-In, First-Out (LIFO) approach?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "A stack follows the LIFO principle, meaning the last element added is the first one removed.  This is in contrast to a queue which uses FIFO (First-In, First-Out).", "options": {"A": "Queue", "B": "Stack", "C": "Linked List", "D": "Heap"}, "is_correct": false, "correct_option": "Stack"}}, {"question": "What is the time complexity of searching for an element in a sorted array using binary search?", "answer": "A", "feedback": {"overall_score": 0, "suggested_improvements": ["Incorrect. Review the correct answer below."], "model_answer": "Binary search repeatedly divides the search interval in half.  This results in a logarithmic time complexity, making it significantly faster than linear search (O(n)) for large datasets.", "options": {"A": "O(n)", "B": "O(log n)", "C": "O(1)", "D": "O(n^2)"}, "is_correct": false, "correct_option": "O(log n)"}}]}]}